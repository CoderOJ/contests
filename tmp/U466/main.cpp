#include <array>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <queue>
#include <unordered_map>
#include <vector>

#define rep(i, n) for (int i = 0; i < (n); i++)
template <class T>
bool check_min(T &a, T b)
{
  return a > b ? a = b, true : false;
}
template <class T>
bool check_max(T &a, T b)
{
  return a < b ? a = b, true : false;
}

struct state_t
{
  int8_t p;
  std::array<std::array<std::array<int8_t, 3>, 3>, 2> c;

  static constexpr state_t init()
  {
    state_t res;
    res.p = 0;
    rep(i, 2) rep(j, 3) rep(k, 3) res.c[i][j][k] = -1;
    res.c[0][0][0] = 0;
    return res;
  };

  state_t extend(int k) const
  {
    state_t res;
    res.p = p + (k >= 2);
    rep(i, 2) rep(j, 3) rep(k, 3) res.c[i][j][k] = -1;

    rep(cp, 2) rep(cx, 3) rep(cy, 3) if (c[cp][cx][cy] >= 0)
    {
      for (int ck = 0; ck <= std::min(2, k - cx - cy); ck++)
        check_max(res.c[cp][cy][ck],
                  (int8_t)(c[cp][cx][cy] + cx + (k - cx - cy - ck) / 3));
      for (int ck = 0; ck <= std::min(2, k - 2 - cx - cy); ck++)
        check_max(res.c[1][cy][ck], (int8_t)(c[cp][cx][cy] + cx));
    }

    rep(cp, 2) rep(cx, 3) rep(cy, 3) check_min(res.c[cp][cx][cy], (int8_t)4);

    return res;
  }

  bool operator==(const state_t &rhs) const
  {
    if (is_win() && rhs.is_win())
      return true;
    else
      return memcmp(this, &rhs, sizeof(*this)) == 0;
  }

  bool is_win() const
  {
    if (p >= 7)
      return true;
    rep(cx, 3) rep(cy, 3) if (c[1][cx][cy] >= 4) return true;
    return false;
  }
};

struct state_hasher
{
  size_t operator()(const state_t &s) const
  {
    if (s.is_win())
      return -1;
    else
    {
      size_t res = 0;
      res = s.p;
      rep(i, 2) rep(j, 3) rep(k, 3) res = (res << 3) + s.c[i][j][k];
      return res;
    }
  }
};

std::unordered_map<state_t, int, state_hasher> mp;
std::vector<state_t> id2s;
int get_id(const state_t &s)
{
  if (mp.count(s))
    return mp[s];
  else
  {
    int id = static_cast<int>(mp.size());
    id2s.push_back(s);
    mp[s] = id;
    return id;
  }
}

std::vector<std::vector<int>> e;

void init_dfa()
{
  std::queue<std::pair<state_t, int>> que;
  que.emplace(state_t::init(), get_id(state_t::init()));
  while (!que.empty())
  {
    const auto [s, si] = que.front();
    que.pop();
    if ((int)e.size() <= si)
      e.resize(si + 1);
    if (e[si].empty())
    {
      e[si].resize(5);
      for (int c = 0; c <= 4; c++)
      {
        state_t vs  = s.extend(c);
        int     vsi = get_id(vs);
        e[si][c]    = vsi;
        que.emplace(vs, vsi);
      }
    }
  }
  fprintf(stderr, "size = %zu\n", e.size());
}

const int MOD = 998244353;
const int N   = 405;
int       cnt[N];
int       n;

auto fac = [] {
  std::array<int, N> res;
  res[0] = 1;
  for (int i = 1; i < N; i++)
    res[i] = 1ll * res[i - 1] * i % MOD;
  return res;
}();

auto inv = [] {
  std::array<int, N> res;
  res[0] = 1;
  res[1] = 1;
  for (int i = 2; i < N; i++)
    res[i] = 1ll * res[MOD % i] * (MOD - MOD / i) % MOD;
  return res;
}();

auto ifac = [] {
  std::array<int, N> res;
  res[0] = 1;
  for (int i = 1; i < N; i++)
    res[i] = 1ll * res[i - 1] * inv[i] % MOD;
  return res;
}();

int binom[][5] = {
    {1, 0, 0, 0, 0},
    {1, 1, 0, 0, 0},
    {1, 2, 1, 0, 0},
    {1, 3, 3, 1, 0},
    {1, 4, 6, 4, 1},
};

void use_zzd()
// {{{
{
  e = {
      {0, 0, 0, 0, 0},           {2, 3, 470, 166, 76},
      {2, 3, 470, 166, 76},      {2, 4, 444, 503, 471},
      {2, 5, 334, 293, 327},     {5, 6, 293, 327, 331},
      {5, 7, 167, 283, 292},     {5, 8, 124, 110, 120},
      {8, 9, 110, 120, 122},     {8, 10, 51, 108, 109},
      {8, 11, 37, 34, 16},       {11, 12, 34, 16, 16},
      {11, 13, 18, 17, 17},      {11, 14, 15, 0, 0},
      {14, 14, 0, 0, 0},         {15, 16, 0, 0, 0},
      {15, 17, 0, 0, 0},         {15, 0, 0, 0, 0},
      {19, 16, 16, 0, 0},        {19, 20, 24, 0, 0},
      {19, 21, 22, 0, 0},        {19, 0, 0, 0, 0},
      {23, 0, 0, 0, 0},          {23, 24, 27, 0, 0},
      {23, 22, 25, 0, 0},        {26, 0, 0, 0, 0},
      {26, 27, 30, 0, 0},        {26, 25, 28, 0, 0},
      {29, 0, 0, 0, 0},          {29, 30, 33, 0, 0},
      {29, 28, 31, 0, 0},        {32, 0, 0, 0, 0},
      {32, 33, 16, 0, 0},        {32, 31, 17, 0, 0},
      {19, 35, 36, 0, 0},        {19, 17, 17, 0, 0},
      {23, 17, 17, 0, 0},        {38, 44, 49, 17, 17},
      {38, 39, 42, 16, 16},      {38, 40, 41, 17, 17},
      {38, 15, 16, 0, 0},        {23, 16, 17, 0, 0},
      {23, 36, 43, 0, 0},        {26, 17, 0, 0, 0},
      {38, 45, 48, 0, 0},        {46, 15, 0, 0, 0},
      {46, 47, 0, 0, 0},         {46, 45, 0, 0, 0},
      {15, 16, 0, 0, 0},         {23, 16, 16, 0, 0},
      {247, 101, 252, 151, 16},  {52, 97, 100, 49, 17},
      {52, 53, 92, 95, 24},      {52, 54, 55, 91, 22},
      {52, 19, 24, 24, 0},       {56, 23, 25, 25, 0},
      {56, 57, 86, 89, 27},      {56, 58, 59, 85, 25},
      {56, 23, 27, 27, 0},       {60, 26, 28, 28, 0},
      {60, 61, 80, 83, 30},      {60, 62, 63, 79, 28},
      {60, 26, 30, 30, 0},       {64, 29, 31, 31, 0},
      {64, 65, 69, 78, 33},      {64, 66, 67, 74, 31},
      {64, 29, 33, 33, 0},       {68, 32, 17, 17, 0},
      {68, 69, 47, 48, 16},      {68, 70, 45, 48, 17},
      {68, 32, 16, 16, 0},       {247, 309, 376, 329, 151},
      {60, 251, 197, 137, 16},   {172, 339, 72, 196, 343},
      {32, 33, 17, 0, 0},        {176, 351, 441, 568, 553},
      {335, 337, 73, 71, 50},    {247, 301, 554, 555, 104},
      {32, 33, 16, 0, 0},        {29, 30, 31, 0, 0},
      {64, 66, 81, 82, 31},      {68, 32, 0, 0, 0},
      {32, 33, 0, 0, 0},         {29, 30, 84, 0, 0},
      {32, 31, 0, 0, 0},         {26, 27, 28, 0, 0},
      {60, 62, 87, 88, 28},      {64, 29, 0, 0, 0},
      {29, 30, 0, 0, 0},         {26, 27, 90, 0, 0},
      {29, 28, 0, 0, 0},         {23, 24, 25, 0, 0},
      {56, 58, 93, 94, 25},      {60, 26, 0, 0, 0},
      {26, 27, 0, 0, 0},         {23, 24, 96, 0, 0},
      {26, 25, 0, 0, 0},         {38, 98, 99, 16, 17},
      {38, 18, 36, 17, 0},       {23, 36, 25, 0, 0},
      {101, 45, 48, 0, 0},       {101, 102, 105, 16, 16},
      {101, 103, 104, 17, 17},   {101, 15, 16, 0, 0},
      {26, 16, 17, 0, 0},        {26, 106, 107, 0, 0},
      {26, 17, 17, 0, 0},        {29, 17, 0, 0, 0},
      {38, 34, 36, 16, 0},       {38, 15, 17, 0, 0},
      {52, 111, 115, 118, 119},  {52, 112, 113, 99, 17},
      {38, 34, 24, 16, 0},       {101, 49, 25, 17, 0},
      {247, 340, 408, 270, 347}, {56, 116, 45, 48, 0},
      {101, 117, 27, 16, 0},     {23, 36, 106, 0, 0},
      {23, 24, 16, 0, 0},        {23, 17, 0, 0, 0},
      {38, 98, 121, 16, 17},     {23, 36, 17, 0, 0},
      {38, 40, 123, 17, 17},     {23, 16, 0, 0, 0},
      {125, 154, 163, 140, 141}, {125, 126, 142, 150, 152},
      {125, 127, 128, 140, 141}, {125, 38, 102, 42, 16},
      {56, 129, 132, 104, 17},   {101, 130, 131, 16, 17},
      {101, 49, 106, 17, 0},     {26, 106, 28, 0, 0},
      {133, 15, 16, 0, 0},       {133, 134, 137, 16, 16},
      {133, 132, 136, 17, 17},   {60, 147, 271, 107, 17},
      {29, 16, 17, 0, 0},        {29, 138, 139, 0, 0},
      {29, 17, 17, 0, 0},        {32, 17, 0, 0, 0},
      {101, 117, 106, 16, 0},    {101, 15, 17, 0, 0},
      {56, 143, 146, 149, 43},   {56, 116, 144, 131, 17},
      {133, 145, 28, 17, 0},     {26, 16, 16, 0, 0},
      {60, 147, 48, 16, 0},      {133, 148, 30, 16, 0},
      {26, 106, 138, 0, 0},      {26, 27, 16, 0, 0},
      {101, 130, 151, 16, 17},   {26, 106, 17, 0, 0},
      {101, 103, 153, 17, 17},   {26, 16, 0, 0, 0},
      {125, 155, 159, 117, 16},  {156, 37, 117, 16, 16},
      {156, 157, 117, 16, 16},   {156, 158, 49, 17, 17},
      {156, 46, 15, 0, 0},       {101, 100, 145, 17, 17},
      {60, 263, 565, 136, 138},  {255, 354, 355, 16, 17},
      {349, 392, 161, 197, 137}, {56, 129, 164, 145, 17},
      {133, 45, 48, 0, 0},       {172, 382, 162, 160, 135},
      {335, 534, 165, 114, 77},  {168, 235, 246, 163, 140},
      {168, 169, 228, 232, 57},  {168, 170, 171, 225, 227},
      {168, 52, 57, 92, 95},     {172, 56, 62, 59, 85},
      {172, 173, 218, 222, 61},  {172, 174, 175, 215, 217},
      {172, 56, 61, 86, 89},     {176, 60, 66, 63, 79},
      {176, 177, 208, 212, 65},  {176, 178, 179, 205, 207},
      {176, 60, 65, 80, 83},     {180, 64, 70, 67, 74},
      {180, 181, 185, 202, 69},  {180, 182, 183, 195, 70},
      {180, 64, 69, 69, 78},     {184, 68, 45, 45, 48},
      {184, 185, 189, 191, 47},  {184, 186, 187, 191, 45},
      {184, 68, 47, 47, 48},     {188, 46, 0, 0, 0},
      {188, 189, 0, 0, 0},       {188, 187, 0, 0, 0},
      {60, 147, 377, 317, 17},   {46, 47, 0, 0, 0},
      {64, 29, 139, 139, 0},     {60, 263, 192, 79, 138},
      {172, 308, 193, 190, 329}, {68, 69, 45, 48, 16},
      {60, 147, 342, 136, 17},   {255, 254, 372, 17, 17},
      {349, 133, 354, 271, 16},  {349, 562, 330, 325, 323},
      {172, 173, 199, 72, 196},  {60, 263, 514, 269, 107},
      {68, 69, 47, 48, 16},      {349, 433, 224, 360, 342},
      {68, 346, 45, 48, 0},      {64, 65, 70, 82, 84},
      {64, 362, 204, 78, 139},   {64, 29, 33, 84, 0},
      {180, 182, 209, 210, 211}, {184, 68, 15, 16, 16},
      {68, 69, 48, 17, 17},      {68, 32, 16, 17, 0},
      {64, 65, 213, 78, 33},     {68, 70, 48, 16, 17},
      {357, 45, 48, 0, 0},       {60, 61, 216, 88, 90},
      {64, 29, 84, 84, 0},       {60, 26, 30, 90, 0},
      {176, 178, 219, 220, 221}, {180, 64, 32, 33, 33},
      {64, 65, 78, 31, 31},      {64, 29, 33, 31, 0},
      {60, 61, 223, 83, 30},     {64, 66, 82, 84, 31},
      {64, 161, 214, 364, 17},   {56, 57, 226, 94, 96},
      {60, 26, 90, 90, 0},       {56, 23, 27, 96, 0},
      {172, 174, 229, 230, 231}, {176, 60, 29, 30, 30},
      {60, 61, 83, 28, 28},      {60, 26, 30, 28, 0},
      {56, 57, 233, 89, 27},     {60, 62, 88, 90, 28},
      {255, 429, 364, 17, 17},   {125, 236, 241, 150, 245},
      {125, 237, 238, 240, 41},  {52, 97, 152, 42, 16},
      {56, 116, 239, 104, 17},   {133, 15, 17, 0, 0},
      {101, 117, 43, 16, 0},     {56, 143, 242, 243, 43},
      {60, 26, 16, 16, 0},       {26, 27, 17, 0, 0},
      {278, 319, 234, 268, 16},  {101, 49, 43, 17, 0},
      {247, 274, 279, 148, 16},  {247, 248, 262, 270, 272},
      {247, 249, 250, 261, 239}, {247, 101, 134, 105, 16},
      {60, 251, 254, 136, 17},   {133, 252, 253, 16, 17},
      {133, 145, 138, 17, 0},    {29, 138, 31, 0, 0},
      {255, 15, 16, 0, 0},       {255, 256, 259, 16, 16},
      {255, 254, 258, 17, 17},   {278, 244, 224, 360, 342},
      {32, 16, 17, 0, 0},        {32, 260, 16, 0, 0},
      {32, 17, 17, 0, 0},        {133, 148, 138, 16, 0},
      {60, 263, 266, 269, 107},  {60, 147, 264, 253, 17},
      {255, 265, 31, 17, 0},     {29, 16, 16, 0, 0},
      {64, 267, 48, 16, 0},      {255, 268, 33, 16, 0},
      {29, 138, 260, 0, 0},      {29, 30, 16, 0, 0},
      {133, 252, 271, 16, 17},   {29, 138, 17, 0, 0},
      {133, 132, 273, 17, 17},   {29, 16, 0, 0, 0},
      {275, 159, 148, 16, 16},   {275, 276, 148, 16, 16},
      {275, 277, 145, 17, 17},   {275, 46, 15, 0, 0},
      {278, 257, 206, 161, 197}, {133, 164, 265, 17, 17},
      {278, 203, 206, 161, 197}, {29, 30, 139, 0, 0},
      {64, 267, 372, 139, 17},   {125, 284, 288, 290, 291},
      {52, 111, 285, 287, 36},   {56, 116, 286, 153, 17},
      {133, 15, 0, 0, 0},        {23, 24, 43, 0, 0},
      {56, 116, 289, 151, 17},   {133, 145, 17, 17, 0},
      {101, 130, 48, 16, 0},     {23, 36, 16, 0, 0},
      {125, 38, 130, 121, 16},   {168, 294, 307, 324, 326},
      {168, 295, 300, 304, 305}, {125, 284, 296, 298, 42},
      {56, 58, 297, 243, 25},    {60, 26, 17, 17, 0},
      {101, 130, 299, 16, 17},   {26, 106, 0, 0, 0},
      {247, 301, 302, 303, 104}, {56, 129, 272, 105, 16},
      {60, 26, 138, 138, 0},     {133, 148, 28, 17, 0},
      {56, 143, 242, 94, 43},    {101, 117, 306, 16, 0},
      {26, 25, 17, 0, 0},        {172, 308, 318, 279, 148},
      {247, 309, 313, 316, 105}, {56, 143, 310, 312, 106},
      {60, 147, 311, 273, 17},   {255, 15, 0, 0, 0},
      {26, 27, 107, 0, 0},       {60, 62, 314, 315, 28},
      {64, 29, 17, 17, 0},       {29, 30, 17, 0, 0},
      {133, 252, 317, 16, 17},   {29, 138, 0, 0, 0},
      {319, 279, 268, 16, 16},   {319, 320, 268, 16, 16},
      {319, 321, 265, 17, 17},   {319, 46, 15, 0, 0},
      {60, 263, 282, 281, 138},  {255, 265, 139, 17, 0},
      {56, 57, 316, 145, 106},   {255, 354, 355, 17, 17},
      {56, 116, 131, 106, 17},   {125, 236, 328, 150, 245},
      {56, 143, 329, 151, 43},   {133, 148, 16, 16, 0},
      {64, 362, 78, 33, 139},    {125, 127, 332, 333, 141},
      {56, 129, 145, 106, 17},   {101, 117, 106, 17, 0},
      {335, 414, 432, 375, 50},  {335, 336, 381, 114, 411},
      {335, 337, 338, 375, 50},  {335, 125, 248, 142, 150},
      {172, 339, 348, 250, 261}, {247, 340, 344, 270, 347},
      {247, 301, 196, 343, 104}, {64, 29, 33, 139, 0},
      {255, 15, 17, 0, 0},       {133, 148, 107, 16, 0},
      {60, 263, 345, 315, 107},  {64, 29, 16, 16, 0},
      {357, 259, 16, 16, 0},     {133, 145, 107, 17, 0},
      {349, 133, 256, 137, 16},  {349, 350, 361, 161, 197},
      {349, 348, 352, 360, 342}, {176, 391, 396, 425, 267},
      {64, 161, 356, 258, 17},   {255, 354, 48, 16, 0},
      {255, 265, 260, 17, 0},    {32, 260, 17, 0, 0},
      {357, 15, 16, 0, 0},       {357, 358, 48, 16, 16},
      {357, 356, 48, 17, 17},    {64, 65, 346, 372, 139},
      {255, 268, 260, 16, 0},    {64, 362, 365, 78, 139},
      {64, 267, 363, 355, 17},   {357, 364, 17, 17, 0},
      {32, 16, 16, 0, 0},        {68, 346, 48, 16, 0},
      {180, 64, 346, 363, 355},  {176, 178, 366, 359, 341},
      {60, 147, 264, 271, 17},   {64, 267, 400, 84, 17},
      {60, 61, 369, 269, 389},   {64, 161, 364, 31, 17},
      {32, 16, 0, 0, 0},         {571, 255, 259, 33, 16},
      {176, 391, 373, 371, 545}, {247, 309, 376, 378, 379},
      {60, 147, 377, 271, 17},   {255, 265, 17, 17, 0},
      {133, 252, 48, 16, 0},     {26, 106, 16, 0, 0},
      {172, 382, 374, 370, 368}, {172, 382, 390, 403, 406},
      {172, 308, 383, 387, 388}, {349, 72, 385, 386, 136},
      {557, 380, 367, 199, 322}, {64, 29, 260, 260, 0},
      {255, 268, 31, 17, 0},     {60, 263, 345, 88, 107},
      {133, 148, 389, 16, 0},    {29, 28, 17, 0, 0},
      {176, 391, 401, 256, 137}, {349, 392, 65, 399, 137},
      {60, 263, 393, 281, 138},  {64, 267, 394, 372, 17},
      {357, 15, 0, 0, 0},        {449, 384, 280, 203, 201},
      {571, 419, 70, 423, 258},  {60, 62, 420, 271, 28},
      {247, 309, 397, 316, 105}, {255, 354, 400, 16, 17},
      {32, 260, 0, 0, 0},        {255, 256, 259, 16, 16},
      {60, 147, 253, 28, 17},    {60, 61, 399, 265, 138},
      {60, 61, 83, 138, 138},    {172, 382, 544, 404, 402},
      {60, 147, 253, 138, 17},   {349, 392, 362, 353, 475},
      {60, 263, 409, 271, 107},  {255, 268, 16, 16, 0},
      {60, 251, 323, 317, 16},   {247, 249, 412, 413, 239},
      {60, 251, 265, 138, 17},   {133, 148, 138, 17, 0},
      {335, 415, 424, 421, 150}, {416, 124, 421, 150, 152},
      {416, 417, 421, 150, 152}, {416, 418, 163, 140, 141},
      {416, 156, 159, 117, 16},  {64, 161, 358, 259, 16},
      {255, 268, 17, 17, 0},     {56, 143, 422, 149, 43},
      {60, 147, 45, 48, 0},      {357, 259, 17, 17, 0},
      {247, 246, 428, 261, 239}, {64, 362, 70, 82, 139},
      {349, 392, 66, 420, 271},  {176, 60, 362, 393, 281},
      {60, 251, 429, 265, 17},   {255, 45, 48, 0, 0},
      {172, 339, 550, 262, 270}, {557, 430, 427, 426, 410},
      {172, 339, 433, 428, 261}, {349, 318, 234, 268, 16},
      {60, 147, 273, 107, 17},   {56, 143, 434, 312, 106},
      {133, 252, 271, 17, 17},   {60, 263, 269, 389, 107},
      {247, 340, 437, 436, 347}, {60, 26, 30, 107, 0},
      {60, 61, 548, 273, 107},   {180, 477, 569, 358, 259},
      {176, 60, 267, 264, 253},  {172, 174, 442, 440, 439},
      {445, 533, 556, 432, 375}, {445, 446, 524, 528, 173},
      {445, 447, 448, 517, 523}, {445, 168, 173, 228, 232},
      {449, 172, 178, 175, 215}, {449, 450, 508, 512, 177},
      {449, 451, 452, 501, 507}, {449, 172, 177, 218, 222},
      {453, 176, 182, 179, 205}, {453, 454, 492, 496, 181},
      {453, 455, 456, 485, 491}, {453, 176, 181, 208, 212},
      {457, 180, 186, 183, 195}, {457, 458, 462, 481, 185},
      {457, 459, 460, 472, 186}, {457, 180, 185, 185, 202},
      {461, 184, 187, 187, 191}, {461, 462, 466, 468, 189},
      {461, 463, 464, 468, 187}, {461, 184, 189, 189, 191},
      {465, 188, 0, 0, 0},       {465, 466, 0, 0, 0},
      {465, 464, 0, 0, 0},       {335, 500, 443, 438, 435},
      {188, 189, 0, 0, 0},       {445, 467, 431, 405, 398},
      {445, 469, 395, 200, 194}, {335, 125, 340, 328, 150},
      {184, 185, 187, 191, 47},  {133, 252, 273, 16, 17},
      {56, 143, 473, 145, 106},  {29, 138, 16, 0, 0},
      {133, 134, 475, 16, 16},   {571, 504, 69, 567, 259},
      {247, 340, 476, 134, 105}, {60, 263, 409, 273, 107},
      {349, 72, 360, 264, 136},  {184, 185, 189, 191, 47},
      {172, 308, 480, 479, 388}, {56, 116, 144, 151, 17},
      {60, 147, 317, 90, 17},    {180, 181, 186, 489, 490},
      {68, 575, 47, 48, 16},     {56, 57, 484, 149, 306},
      {60, 251, 265, 28, 17},    {68, 69, 48, 16, 16},
      {68, 70, 48, 17, 17},      {180, 64, 69, 213, 78},
      {457, 459, 493, 494, 495}, {461, 184, 46, 47, 47},
      {184, 185, 191, 45, 45},   {184, 68, 47, 45, 48},
      {180, 181, 497, 202, 69},  {184, 186, 191, 47, 45},
      {349, 133, 268, 30, 16},   {172, 308, 498, 488, 413},
      {168, 294, 499, 487, 483}, {176, 177, 502, 505, 506},
      {180, 64, 213, 490, 78},   {335, 500, 482, 478, 474},
      {64, 362, 575, 78, 260},   {64, 65, 78, 33, 33},
      {64, 66, 74, 31, 31},      {176, 60, 65, 223, 83},
      {453, 455, 509, 510, 511}, {457, 180, 68, 69, 69},
      {180, 181, 202, 70, 67},   {180, 64, 69, 70, 82},
      {176, 177, 513, 212, 65},  {180, 182, 489, 490, 211},
      {64, 267, 45, 48, 0},      {531, 275, 279, 148, 16},
      {531, 515, 428, 261, 239}, {172, 173, 518, 521, 522},
      {176, 60, 519, 520, 83},   {64, 66, 74, 33, 31},
      {64, 66, 82, 31, 31},      {60, 61, 83, 30, 30},
      {60, 62, 79, 28, 28},      {172, 56, 61, 233, 89},
      {449, 451, 525, 526, 527}, {453, 176, 64, 65, 80},
      {176, 177, 212, 66, 63},   {176, 60, 65, 216, 88},
      {172, 173, 529, 222, 61},  {176, 178, 505, 506, 530},
      {64, 29, 84, 31, 0},       {531, 516, 201, 270, 272},
      {531, 424, 201, 270, 272}, {335, 534, 543, 114, 77},
      {335, 535, 536, 539, 542}, {168, 235, 411, 142, 150},
      {172, 308, 537, 538, 261}, {349, 133, 354, 253, 16},
      {60, 251, 254, 273, 17},   {247, 309, 540, 541, 379},
      {60, 147, 271, 389, 17},   {133, 252, 48, 17, 0},
      {56, 129, 347, 151, 16},   {172, 382, 544, 547, 549},
      {176, 60, 161, 197, 137},  {255, 268, 260, 17, 0},
      {64, 161, 364, 260, 17},   {60, 61, 548, 136, 138},
      {255, 268, 84, 16, 0},     {60, 147, 253, 107, 17},
      {349, 348, 546, 545, 342}, {64, 362, 346, 355, 139},
      {349, 562, 551, 161, 323}, {64, 267, 355, 260, 17},
      {60, 147, 136, 138, 17},   {133, 148, 107, 17, 0},
      {557, 532, 203, 201, 270}, {557, 558, 75, 552, 550},
      {557, 559, 560, 407, 198}, {557, 247, 350, 262, 270},
      {176, 561, 570, 352, 360}, {349, 562, 566, 161, 323},
      {349, 72, 563, 565, 136},  {64, 267, 564, 258, 17},
      {357, 15, 17, 0, 0},       {255, 268, 139, 16, 0},
      {64, 362, 70, 74, 139},    {357, 573, 48, 16, 17},
      {64, 65, 567, 364, 260},   {357, 358, 48, 16, 16},
      {571, 255, 358, 259, 16},  {571, 572, 486, 567, 358},
      {571, 570, 574, 346, 564}, {357, 364, 16, 17, 0},
      {68, 567, 45, 48, 17},     {68, 346, 45, 48, 17},
  };
}
// }}}

int main()
{
  scanf("%d", &n);
  for (int i = 0; i < 13; i++)
  {
    int w, t;
    scanf("%d%d", &w, &t);
    cnt[w]++;
  }

#ifndef USE_ZZD
  init_dfa();
  size_t s = 0;
#else
  use_zzd();
  size_t s = 1;
#endif

  std::vector<std::vector<int>> dp(1, std::vector<int>(e.size(), 0));
  dp[0][s] = 1;
  for (int i = 1; i <= n; i++)
  {
    std::vector<std::vector<int>> cur(i * 4 + 1, std::vector<int>(e.size(), 0));
    for (int x = 0; x <= (i - 1) * 4; x++)
      for (size_t j = 0; j < e.size(); j++)
        if (dp[x][j])
          for (int c = cnt[i]; c <= 4; c++)
            cur[x + c][e[j][c]] = (cur[x + c][e[j][c]] + 1ll * dp[x][j] * binom[4 - cnt[i]][c - cnt[i]]) % MOD;
    dp = std::move(cur);
  }

  int ans = 0;
  for (size_t j = s; j < e.size(); j++)
#ifndef USE_ZZD
    if (!id2s[j].is_win())
#endif
      for (int i = 13; i <= n * 4; i++)
        if (dp[i][j])
          ans = (ans + 1ll * fac[i - 13] * fac[n * 4 - i] % MOD * dp[i][j]) % MOD;
  ans = 1ll * ans * ifac[n * 4 - 13] % MOD;

  std::cout << ans << std::endl;

  return 0;
}
