(define n (read))

(define (strip-low a)
  (logand a (- a 1)))

(if (= 0 (strip-low n))
  (display "No\n")
  (begin
    (display "Yes\n")
    (display (+ n 1)) (display #\ ) (display (+ n 2)) (newline)
    (display (+ n 2)) (display #\ ) (display (+   3)) (newline)
    (display (+   3)) (display #\ ) (display (+   1)) (newline)
    (display (+   1)) (display #\ ) (display (+   2)) (newline)
    (display (+   2)) (display #\ ) (display (+ n 3)) (newline)
    (let loop ((i 4))
      (when (<= (+ i 1) n)
        (display 1)         (display #\ ) (display i)          (newline) 
        (display i)         (display #\ ) (display (+ n i 1))  (newline) 
        (display 1)         (display #\ ) (display (+ i 1))    (newline) 
        (display (+ i 1)) (display #\ ) (display (+ n i))      (newline) 
        (loop (+ i 2))))
    (when (= 0 (modulo n 2))
      (let* ((ra 1)
             (rb (strip-low (strip-low (logxor n ra))))
             (rc (logxor n ra rb)))
        (display rb) (display #\ ) (display n)       (newline)
        (display rc) (display #\ ) (display (+ n n)) (newline)))))
